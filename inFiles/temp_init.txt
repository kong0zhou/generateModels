package {{.FolderName}}

import (
	"fmt"

	"../common"
	"github.com/astaxie/beego/logs"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

/*
*******	yaml配置文件 ********
postgresql:
  host: {{.PostgresArgs.Host}}
  port: {{.PostgresArgs.Port}}
  user:	{{.PostgresArgs.User}}
  dbname: {{.PostgresArgs.DBName}}
  # true 或者 false
  sslmode: {{.PostgresArgs.SSLMode}}
  password: {{.PostgresArgs.Password}}

****** 注意事项 *******
这里运用的ConfViper是  "github.com/spf13/viper" 包的
其类型是 *viper.Viper，要在common包中初始化，或者你可以自定义其他包，然后进行导入之后进行修改
*/

var db *gorm.DB

func InitDB() (err error) {
	host := common.ConfViper.GetString(`postgresql.host`)
	port := common.ConfViper.GetString(`postgresql.port`)
	user := common.ConfViper.GetString(`postgresql.user`)
	dbname := common.ConfViper.GetString(`postgresql.dbname`)
	sslmode := common.ConfViper.GetBool(`postgresql.sslmode`)
	password := common.ConfViper.GetString(`postgresql.password`)
	if host == `` || port == `` || user == `` || dbname == `` || password == `` {
		err = fmt.Errorf(`初始化数据库失败，参数为空`)
		logs.Error(err)
		return err
	}
	var dbInfo string
	if sslmode {
		dbInfo = fmt.Sprintf(`host=%s port=%s user=%s dbname=%s password=%s`, host, port, user, dbname, password)
	} else {
		dbInfo = fmt.Sprintf(`host=%s port=%s user=%s dbname=%s sslmode=disable password=%s`, host, port, user, dbname, password)
	}
	db, err = gorm.Open(`postgres`, dbInfo)
	if err != nil {
		logs.Error(err)
		return
	}
	// 全局禁用表名复数
	db.SingularTable(true)

	return nil
}